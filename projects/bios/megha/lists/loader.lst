     1                                  ; Megha OS Loader
     2                                  ; Loades different programs/modules into memory and calls the _init routine.
     3                                  ; Version: 0.21 (130819)
     4                                  ;
     5                                  ; Initial version was 0.2
     6                                  ;
     7                                  ; -------------------------
     8                                  ; Changes in Version 0.2
     9                                  ; -------------------------
    10                                  ; * The loader output welcome message now has a ascii art 
    11                                  ;   (The letter capital M).
    12                                  ;
    13                                  ; -------------------------
    14                                  ; Changes in Version 0.2
    15                                  ; -------------------------
    16                                  ; * Loads multiple files/modules mentioned in fat_files location.
    17                                  ;
    18                                  ; * Load location of files are calculated based on the size of the previous
    19                                  ;   loaded file. Files are loaded right after one another, but at a 16 byte
    20                                  ;   boundary.
    21                                  ;
    22                                  ; * Do not load the 'splash' bitmap file. That job is now not part of the
    23                                  ;   loader.
    24                                  ;
    25                                  ; * Displays friendly messages while loading files and when error occures in
    26                                  ;   loading files.
    27                                  ;
    28                                  ; * Max file size of the loader is 768 bytes. 
    29                                  ;
    30                                  ; * Loaded is loaded at location 0x800:0x100 which is an area shared by the MOS
    31                                  ;   data block. After the loader is done working can control is transfered to
    32                                  ;   the CLI, this area will be reused by the kernel.
    33                                  ;
    34                                  ; * Maintains a list at location 0x800:1, with each entry holding the segment
    35                                  ;   number where each of the module is loaded. There is also at 0x800:0 a
    36                                  ;   'count' of entries in the list.
    37                                  ;
    38                                  ; * Includes a file called 'mos.inc'. This file lists versions of all the
    39                                  ;   different modiles in the operating system, and different function numbers
    40                                  ;   that can be called via each of the software interrupts of the OS.
    41                                  
    42                                  	; ******************************************************
    43                                  	; MACRO AND STRUCTURE BLOCK
    44                                  	; ******************************************************
    45                                  
    46                                  	%macro printString 1
    47                                  		push si
    48                                  		    mov si, %1
    49                                  		    int 0x31
    50                                  		pop si
    51                                  	%endmacro
    52                                  
    53                                  
    54                                  	; We store the addresses of loaded programs/modules in a list at
    55                                  	; location 0x800:0x1. 0x800:0 is used to store the number of item in 
    56                                  	; this list.
    57                                  	; This structure can be found in the mda.inc file
    58                                  	%macro AddToModuleList 1
    59                                  		push bx
    60                                  		push ax
    61                                  			; load the argument into a register.
    62                                  			; This will save us from specifying a operand size.
    63                                  			; Also makes the below code work with any kind of
    64                                  			;argument.
    65                                  			mov ax, %1
    66                                  			; get the count already in memory
    67                                  			xor bx, bx
    68                                  			mov bl, [da_loader_module_list.count]
    69                                  
    70                                  			; each list item is 2 bytes long, so we multiply by 2
    71                                  			shl bx, 1	
    72                                  			mov [bx + da_loader_module_list.seg_start], ax
    73                                  
    74                                  			; Increment the count value
    75                                  			inc byte [da_loader_module_list.count]
    76                                  		pop ax
    77                                  		pop bx
    78                                  	%endmacro
    79                                  
    80                                  	; ******************************************************
    81                                  	; MAIN BLOCK
    82                                  	; ******************************************************
    83                                  	
    84                                  ; Loader is loaded at location 0x800:0x100
    85                                  	ORG 0x100
    86                                  
    87                                  _init:
    88                                  	; Clear the memory for storing loaded modules
    89 00000000 C606000000              	mov [da_loader_module_list.count], byte 0
    90                                  
    91                                  	; Prints version information and other statup messages.
    92                                  	printString msg_loader_welcome
    92 00000005 56                  <1>  push si
    92 00000006 BE[9100]            <1>  mov si, %1
    92 00000009 CD31                <1>  int 0x31
    92 0000000B 5E                  <1>  pop si
    93                                  
    94                                  	; Loads the start address of the list of files to load into 
    95                                  	;index registers.
    96 0000000C BE[0000]                	mov si, fat_files
    97 0000000F BF[3100]                	mov di, friendly_filenames
    98                                  .load_next:
    99 00000012 803C00                  	cmp [si],byte 0
   100 00000015 7452                    	je .load_end
   101                                  
   102                                  	; print the name of the file to be loadede on screen. 
   103                                  	printString di
   103 00000017 56                  <1>  push si
   103 00000018 89FE                <1>  mov si, %1
   103 0000001A CD31                <1>  int 0x31
   103 0000001C 5E                  <1>  pop si
   104                                  
   105                                  	; Load the file to memory
   106                                  	; Inputs: 
   107                                  	; 1) File is loaded into a segment at a specific offset. These are 
   108                                  	;    * Segment: [_init_addr + 2]
   109                                  	;    * Offset : [_init_addr]
   110                                  	; 2) SI register points to the filename in fat_files.
   111                                  
   112 0000001D A1[2F00]                	mov ax, [_init_addr + 2]
   113 00000020 8B1E[2D00]              	mov bx, [_init_addr]
   114 00000024 89F2                    	mov dx, si
   115 00000026 CD30                    	int 0x30
   116                                  
   117                                  	; On successful load, AX should contain the size of the file that was
   118                                  	; loaded. If set to zero, the file could not be loaded.
   119 00000028 83F800                  	cmp ax, 0
   120 0000002B 7456                    	je failed_file_not_found
   121                                  
   122                                  	; call the _init routine of the loaded module
   123 0000002D 1E                      	push ds
   124 0000002E 6A00                    		push 0		; argument count, there are none
   125 00000030 FF1E[2D00]              		    call far [_init_addr] 
   126 00000034 83EC02                  		sub sp, 2	; adjust for the push 0
   127 00000037 1F                      	pop ds
   128                                  
   129                                  	; Add to the module list
   130                                  	AddToModuleList [_init_addr+2]
   130 00000038 53                  <1>  push bx
   130 00000039 50                  <1>  push ax
   130                              <1> 
   130                              <1> 
   130                              <1> 
   130                              <1> 
   130 0000003A A1[2F00]            <1>  mov ax, %1
   130                              <1> 
   130 0000003D 31DB                <1>  xor bx, bx
   130 0000003F 8A1E0000            <1>  mov bl, [da_loader_module_list.count]
   130                              <1> 
   130                              <1> 
   130 00000043 D1E3                <1>  shl bx, 1
   130 00000045 894701              <1>  mov [bx + da_loader_module_list.seg_start], ax
   130                              <1> 
   130                              <1> 
   130 00000048 FE060000            <1>  inc byte [da_loader_module_list.count]
   130 0000004C 58                  <1>  pop ax
   130 0000004D 5B                  <1>  pop bx
   131                                  
   132                                  	; print 'loading complete message'
   133                                  	printString msg_file_loaded
   133 0000004E 56                  <1>  push si
   133 0000004F BE[7C00]            <1>  mov si, %1
   133 00000052 CD31                <1>  int 0x31
   133 00000054 5E                  <1>  pop si
   134                                  
   135                                  	; calculate the next segment
   136                                  	; seg = (size (ax) + OFFSET (_init_addr) >> 4) +1 + seg
   137 00000055 0306[2D00]              	add ax, [_init_addr]
   138 00000059 C1E804                  	shr ax, 4
   139 0000005C 40                      	inc ax
   140 0000005D 0106[2F00]              	add [_init_addr + 2], ax
   141                                  	
   142                                  	;  Progress the two index registers
   143 00000061 83C70F                  	add di, 15		; 15 bytes per entry in friendly file names
   144 00000064 83C60B                  	add si, 11		; 11 bytes per entry in fat_files
   145 00000067 EBA9                    	jmp .load_next
   146                                  .load_end:
   147                                  	
   148                                  	; clear the screen
   149 00000069 BB0200                  	mov bx, DB_CLEARSCR
   150 0000006C CD41                    	int 0x41
   151                                  
   152                                  	; Print hello world
   153 0000006E BB0100                  	mov bx, DB_PRINTSTR
   154 00000071 B8[8401]                	mov ax, hello
   155 00000074 CD41                    	int 0x41
   156                                  
   157                                  	; print a number in hex format
   158 00000076 BB0000                  	mov bx, DB_PRINTHEX
   159 00000079 B845FA                  	mov ax, 0xfa45
   160 0000007C B91000                  	mov cx, 16
   161 0000007F CD41                    	int 0x41
   162                                  
   163 00000081 EB07                    	jmp exit
   164                                  
   165                                  failed_file_not_found:
   166                                  	printString msg_file_not_found
   166 00000083 56                  <1>  push si
   166 00000084 BE[8400]            <1>  mov si, %1
   166 00000087 CD31                <1>  int 0x31
   166 00000089 5E                  <1>  pop si
   167                                  exit:
   168 0000008A EBFE                    	jmp $
   169                                  
   170                                  ; ================ Included files =====================
   171                                  section .data
   172                                  
   173                                  %include "../include/mos.inc"
     1                              <1> ; Main include file for kernel, driver and application developers.
     2                              <1> ; It includes the function numbers for all interrupts in the MOS kernel.
     3                              <1> ; It also includes some version information of various files in this release of
     4                              <1> ; the MOS Operating System.
     5                              <1> 
     6                              <1> %ifndef __MOS_INC__
     7                              <1> 	%define __MOS_INC__
     8                              <1> 	
     9                              <1> 	%define 	MOS_VER 		"0.1  (110819)"
    10                              <1> 	%define 	BOOTLOADER_VER 	"0.32 (110819)"
    11                              <1> 	%define 	LOADER_VER		"0.21  (130819)"
    12                              <1> 	%define		DEBUG_DRV_VER	"0.1  (100819)"
    13                              <1> 	%define		KERNEL_VER		"0.1 (180819)"
    14                              <1> 
    15                              <1> 	; Segment and fixed lengths of different parts of MOS
    16                              <1> 	MDA_SEG:	EQU 		0x800
    17                              <1> 	MDA_OFF:	EQU		0x0
    18                              <1> 	MDA_LEN:	EQU		1024
    19                              <1> 
    20                              <1> 	LOADER_SEG	EQU		0x800
    21                              <1> 	LOADER_OFF:	EQU		0x100
    22                              <1> 	LOADER_LEN:	EQU		768
    23                              <1> 
    24                              <1> 	MODULE0_SEG:	EQU		0x840
    25                              <1> 	MODULE0_OFF:	EQU		0x64
    26                              <1> 	
    27                              <1> 	; Routines in debug.mod (accessed via INT 0x41)
    28                              <1> 	DB_PRINTHEX			EQU 0
    29                              <1> 	DB_PRINTSTR			EQU 1
    30                              <1> 	DB_CLEARSCR			EQU 2
    31                              <1> 
    32                              <1> 	; Routines in despatcher.mod
    33                              <1> 	DS_ADD_ROUTINE			EQU 0x30
    34                              <1> 
    35                              <1> %endif
   174                                  %include "../include/mda.inc"
     1                              <1> ; Megha Operating System (MOS) Data Area Maps
     2                              <1> 
     3                              <1> %ifndef __MDA_INC_
     4                              <1> 	%define __MDA_INC_
     5                              <1> 
     6                              <1> 	; We store the addresses of loaded programs/modules in a list at
     7                              <1> 	; location 0x800:0x1. 0x800:0 is used to store the number of item in 
     8                              <1> 	; this list.
     9                              <1> 
    10                              <1> 	MAX_LOADER_MODULES:	EQU	10
    11                              <1> 
    12                              <1> 	struc da_loader_module_list 
    13 00000000 <res 00000001>      <1> 	    .count     resb 1
    14 00000001 <res 00000002>      <1> 	    .seg_start resw 1
    15                              <1> 	endstruc
    16                              <1> 
    17                              <1> 	
    18                              <1> 	; Despatcher stores routines in this list. It starts from 0x800:21.
    19                              <1> 	; Each of the item has an offset and segment of the subroutine.
    20                              <1> 	; A subroutine can be called by putting routine number in BX and
    21                              <1> 	; calling INT 0x41
    22                              <1> 	
    23                              <1> 	DS_MAX_ITEMS:	EQU	50
    24                              <1> 	
    25                              <1> 	struc da_desp_routine_list_item, 21
    26 00000015 <res 00000002>      <1> 		.offset_start resw 1
    27 00000017 <res 00000002>      <1> 		.seg_start    resw 1
    28                              <1> 	endstruc
    29                              <1> 
    30                              <1> %endif
   175                                  
   176                                  ; ================ Data for loader =====================
   177 00000000 50414E49432020204D-     fat_files:   db 'PANIC   MOD'
   177 00000009 4F44               
   178 0000000B 44455350434852204D-     	     db 'DESPCHR MOD'
   178 00000014 4F44               
   179 00000016 44454255472020204D-     	     db 'DEBUG   MOD'
   179 0000001F 4F44               
   180 00000021 4B45524E454C20204D-     	     db 'KERNEL  MOD'
   180 0000002A 4F44               
   181                                               ;db 'IO      DRV'
   182 0000002C 00                                   db 0
   183                                  
   184 0000002D 6400                    _init_addr: dw 	 0x64
   185 0000002F 4008                                dw   0x840 ;MODULE0_SEG
   186                                  
   187                                  ; ================ Text messages =======================
   188 00000031 0A0D2070616E69632E-     friendly_filenames: db 10,13," panic.mod..",0
   188 0000003A 6D6F642E2E00       
   189 00000040 0A0D20646573706368-     		    db 10,13," despchr.mod",0
   189 00000049 722E6D6F6400       
   190 0000004F 0A0D2064656275672E-     		    db 10,13," debug.mod..",0
   190 00000058 6D6F642E2E00       
   191 0000005E 0A0D206B65726E656C-     		    db 10,13," kernel.mod.",0
   191 00000067 2E6D6F642E00       
   192 0000006D 0A0D20696F2E647276-     		    db 10,13," io.drv.....",0
   192 00000076 2E2E2E2E2E00       
   193                                  
   194 0000007C 202020446F6E6500        msg_file_loaded:    db "   Done",0
   195 00000084 2020204E6F7420666F-     msg_file_not_found: db "   Not found",0
   195 0000008D 756E6400           
   196                                  
   197                                  ;msg_loader_welcome: db "Megha Operating System (MOS) ", MOS_VER,10,13
   198                                  		    ;db "MOS Loader ", LOADER_VER, 10,13,0
   199                                  
   200 00000091 0A0D0A0D                msg_loader_welcome: db 10,13,10,13
   201 00000095 202323232320202020-     		    db ' ####      ####  ',10,13
   201 0000009E 20202323232320200A-
   201 000000A7 0D                 
   202 000000A8 202323202323202020-     		    db ' ## ##    ## ##  ','Megha Operating System (MOS)',10,13
   202 000000B1 20232320232320204D-
   202 000000BA 65676861204F706572-
   202 000000C3 6174696E6720537973-
   202 000000CC 74656D20284D4F5329-
   202 000000D5 0A0D               
   203 000000D7 202323202023232020-     		    db ' ##  ##  ##  ##  ','Version:',MOS_VER,10,13         
   203 000000E0 232320202323202056-
   203 000000E9 657273696F6E3A302E-
   203 000000F2 312020283131303831-
   203 000000FB 39290A0D           
   204 000000FF 202323202020232323-     		    db ' ##   ####   ##  ','MOS Loader ', LOADER_VER, 10,13
   204 00000108 23202020232320204D-
   204 00000111 4F53204C6F61646572-
   204 0000011A 20302E323120202831-
   204 00000123 3330383139290A0D   
   205 0000012B 202323202020202323-     		    db ' ##    ##    ##  ',10,13
   205 00000134 20202020232320200A-
   205 0000013D 0D                 
   206 0000013E 202D2D2D2D2D2D2D2D-     		    db ' ----------------------------------------------'
   206 00000147 2D2D2D2D2D2D2D2D2D-
   206 00000150 2D2D2D2D2D2D2D2D2D-
   206 00000159 2D2D2D2D2D2D2D2D2D-
   206 00000162 2D2D2D2D2D2D2D2D2D-
   206 0000016B 2D2D               
   207 0000016D 0A0D204C6F6164696E-     		    db 10,13,' Loading modules..',10,13,0
   207 00000176 67206D6F64756C6573-
   207 0000017F 2E2E0A0D00         
   208                                  
   209 00000184 53686F77696E672074-     hello: db "Showing this message using a debug.mod routine. Result: 0x",0
   209 0000018D 686973206D65737361-
   209 00000196 6765207573696E6720-
   209 0000019F 612064656275672E6D-
   209 000001A8 6F6420726F7574696E-
   209 000001B1 652E20526573756C74-
   209 000001BA 3A20307800         
   210                                  ; ================ ZERO PADDING =======================
   211 000001BF 00<rept>                times 768 - ($ - $$) db 0
   212                                  
   213                                  
   214                                  
